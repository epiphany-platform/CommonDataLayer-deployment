###
# This is example docker compose that sets up local developer environment.
# Please refer to README.md for instructions on how to run it.
###

version: "2.2"

services:
  schema_registry:
    image: cdl-schema-registry:latest
    build:
      context: ../..
      dockerfile: Dockerfile
      args:
        - BIN=schema-registry
        - ENV=DEV
    command: /bin/schema-registry
    ports:
      - "50101:50101"
    environment:
      DB_NAME: "/var/data/schema"
      REPLICATION_ROLE: "master"
      COMMUNICATION_METHOD: "kafka"
      KAFKA_BROKERS: "kafka:9093"
      KAFKA_GROUP_ID: "schema_registry"
      REPLICATION_SOURCE: "cdl.schema_registry.internal"
      REPLICATION_DESTINATION: "cdl.schema_registry.internal"
      INPUT_PORT: "50101"
      IMPORT_FILE: "/var/data/schema.json"
      RUST_LOG: info,schema_registry=trace
      OTEL_SERVICE_NAME: "schema-registry"
      OTEL_EXPORTER_JAEGER_AGENT_HOST: "jaeger"
      OTEL_EXPORTER_JAEGER_AGENT_PORT: "6831"
    volumes:
      - ./setup/schema_registry/initial-schema.mq.json:/var/data/schema.json

  data_router:
    image: cdl-data-router:latest
    build:
      context: ../..
      dockerfile: Dockerfile
      args:
        - BIN=data-router
        - ENV=DEV
    command: /bin/data-router
    environment:
      COMMUNICATION_METHOD: "kafka"
      KAFKA_BROKERS: "kafka:9093"
      KAFKA_GROUP_ID: "data_router"
      INPUT_SOURCE: "cdl.data.input"
      SCHEMA_REGISTRY_ADDR: "http://schema_registry:50101"
      CACHE_CAPACITY: "1000"
      RUST_LOG: info,data_router=trace
      OTEL_SERVICE_NAME: "data-router"
      OTEL_EXPORTER_JAEGER_AGENT_HOST: "jaeger"
      OTEL_EXPORTER_JAEGER_AGENT_PORT: "6831"

  query_router:
    image: cdl-query-router:latest
    build:
      context: ../..
      dockerfile: Dockerfile
      args:
        - BIN=query-router
        - ENV=DEV
    command: "/bin/query-router"
    ports:
      - "50103:50103"
    environment:
      CACHE_CAPACITY: 1024
      INPUT_PORT: 50103
      SCHEMA_REGISTRY_ADDR: "http://schema_registry:50101"
      RUST_LOG: info,query_router=trace
      OTEL_SERVICE_NAME: "query-router"
      OTEL_EXPORTER_JAEGER_AGENT_HOST: "jaeger"
      OTEL_EXPORTER_JAEGER_AGENT_PORT: "6831"

  edge_registry:
    image: cdl-edge-registry:latest
    build:
      context: ../..
      dockerfile: Dockerfile
      args:
        - BIN=edge-registry
        - ENV=DEV
    command: "/bin/edge-registry"
    ports:
      - "50110:50110"
    environment:
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DBNAME: postgres
      POSTGRES_SCHEMA: cdl
      RPC_PORT: 50110
      CONSUMER_METHOD: kafka
      CONSUMER_HOST: "kafka:9093"
      CONSUMER_TAG: edge-registry
      CONSUMER_SOURCE: "cdl.edge.input"
      RUST_LOG: info,edge_registry=trace
      OTEL_SERVICE_NAME: "edge-registry"
      OTEL_EXPORTER_JAEGER_AGENT_HOST: "jaeger"
      OTEL_EXPORTER_JAEGER_AGENT_PORT: "6831"

  object_builder:
    image: cdl-object-builder:latest
    build:
      context: ../..
      dockerfile: Dockerfile
      args:
        - BIN=object-builder
        - ENV=DEV
    command: "/bin/object-builder"
    ports:
      - "50107:50107"
    environment:
      MQ_METHOD: kafka
      INPUT_PORT: "50107"
      KAFKA_BROKERS: "kafka:9093"
      KAFKA_GROUP_ID: "object_builder"
      MQ_SOURCE: "cdl.materialize"
      SCHEMA_REGISTRY_ADDR: "http://schema_registry:50101"
      RUST_LOG: info,object_builder=trace
      OTEL_SERVICE_NAME: "object-builder"
      OTEL_EXPORTER_JAEGER_AGENT_HOST: "jaeger"
      OTEL_EXPORTER_JAEGER_AGENT_PORT: "6831"

  materializer_ondemand:
    image: cdl-materializer-ondemand:latest
    build:
      context: ../..
      dockerfile: Dockerfile
      args:
        - BIN=materializer-ondemand
        - ENV=DEV
    command: "/bin/materializer-ondemand"
    ports:
      - "50108:50108"
    environment:
      INPUT_PORT: "50108"
      OBJECT_BUILDER_ADDR: "http://object_builder:50107"
      RUST_LOG: info,materializer_ondemand=trace
      OTEL_SERVICE_NAME: "materializer-ondemand"
      OTEL_EXPORTER_JAEGER_AGENT_HOST: "jaeger"
      OTEL_EXPORTER_JAEGER_AGENT_PORT: "6831"

  partial_update_engine:
    image: cdl-partial-update-engine:latest
    build:
      context: ../..
      dockerfile: Dockerfile
      args:
        - BIN=partial-update-engine
        - ENV=DEV
    command: "/bin/partial-update-engine"
    environment:
      SCHEMA_REGISTRY_ADDR: "http://schema_registry:50101"
      KAFKA_BROKERS: "kafka:9093"
      KAFKA_GROUP_ID: "partial_update_engine"
      NOTIFICATION_TOPIC: "cdl.reports"
      OBJECT_BUILDER_TOPIC: "cdl.materialize"
      SLEEP_PHASE_LENGTH: 1
      RUST_LOG: info,partial_update_engine=trace
      OTEL_SERVICE_NAME: "partial-update-engine"
      OTEL_EXPORTER_JAEGER_AGENT_HOST: "jaeger"
      OTEL_EXPORTER_JAEGER_AGENT_PORT: "6831"

  web_api:
    image: cdl-api:latest
    command: "/bin/api"
    ports:
      - "50106:50106"
    build:
      context: ../..
      dockerfile: Dockerfile
      args:
        - BIN=api
    environment:
      INPUT_PORT: 50106
      RUST_LOG: info,api=trace
      SCHEMA_REGISTRY_ADDR: "http://schema_registry:50101"
      EDGE_REGISTRY_ADDR: "http://edge_registry:50110"
      ON_DEMAND_MATERIALIZER_ADDR: "http://materializer_ondemand:50108"
      QUERY_ROUTER_ADDR: "http://query_router:50103"
      COMMUNICATION_METHOD: "kafka"
      KAFKA_BROKERS: "kafka:9093"
      KAFKA_GROUP_ID: "cdl-api"
      REPORT_SOURCE: "cdl.reports"
      INSERT_DESTINATION: "cdl.data.input"
      OTEL_SERVICE_NAME: "api"
      OTEL_EXPORTER_JAEGER_AGENT_HOST: "jaeger"
      OTEL_EXPORTER_JAEGER_AGENT_PORT: "6831"

networks:
  compose_default:
    external: true
